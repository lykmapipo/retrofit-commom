apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group = 'com.github.lykmapipo'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 60
        versionName "0.6.0"
        consumerProguardFiles 'proguard-rules.pro'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    // local dependencies
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // androidx dependencies
    implementation "androidx.annotation:annotation:${ANDROIDX_ANNOTATION_VERSION}"

    // retrofit dependencies
    implementation "com.google.code.gson:gson:${GSON_VERSION}"
    implementation "com.squareup.okhttp3:okhttp:${OKHTTP_VERSION}"
    //implementation "com.squareup.okhttp3:logging-interceptor:${OKHTTP_VERSION}"
    implementation "com.squareup.retrofit2:retrofit:${RETROFIT_VERSION}"
    implementation "com.squareup.retrofit2:converter-gson:${RETROFIT_VERSION}"
    implementation "com.github.lykmapipo:retrofit-play-tasks-adapter:${PLAY_TASKS_ADAPTER}"

    // misc dependencies
    implementation "com.github.lykmapipo:android-common:${ANDROID_COMMON_VERSION}"

    // test dependencies
    testImplementation "junit:junit:${JUNIT_VERSION}"
    testImplementation "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${OKHTTP_VERSION}"
    testImplementation "com.squareup.retrofit2:retrofit-mock:${RETROFIT_VERSION}"
    testImplementation "androidx.test:core:${ANDROIDX_TEST_CORE}"
    testImplementation "com.github.javafaker:javafaker:${JAVA_FAKER_VERSION}"
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// uncomment to build a jar file in addition to the default aar file
//android.libraryVariants.all { variant ->
//    def name = variant.buildType.name
//    def task = project.tasks.create "jar${name.capitalize()}", Jar
//    task.dependsOn variant.javaCompile
//    task.from variant.javaCompile.destinationDir
//    artifacts.add('archives', task);
//}

